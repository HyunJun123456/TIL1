깃 초기화하기
git init
: 깃을 초기화함
init은 initialize(초기화하다)의 약자
.git이라는 파일이 생성(보통은 감춰져있다.)

스테이지와 커밋 이해하기
작업 트리
: working tree는 파일 수정, 저장 등의 작업을 하는 디렉터리로,
작업 디렉터리라고도 함
우리 눈에 보이는 디렉터리가 바로 작업 트리임

스테이지
: stage는 버전으로 만들 파일이 대기하는 공간
스테이징 영역이라고도 부름

저장소
: repository는 스테이지에서 대기하고 있던 파일들을 버전으로
만들어 저장하는 공간임

hello.txt 파일 문서를 수정하고 저장하면 그 파일은 작업 트리에 있게 됩니다.
그리고 수정한 hello.txt 파일을 버전으로 만들고 싶을 때 스테이지에 넣습니다.
다른 파일도 수정한 뒤 버전으로 만들겠다면 스테이지에 넣어 둡니다.
파일 수정을 끝내고 스테이지에 다 넣었다면 버전을 만들기 위해 깃에게
커밋 명령을 내립니다. 커밋 명령을 내리면 새로운 버전이 생성되면서 스테이지에
대기하던 파일이 모두 저장소에 저장됩니다.

정리하면 먼저 작업 트리에서 문서를 수정 -> 수정한 파일 중 버전으로 만들고 싶은 것을
스테이징 영역, 즉 스테이지에 저장함 -> 그리고 스테이지에 있던 파일을 저장소로 커밋
이 과정이 깃이 버전을 만드는 순서임

작업 트리에서 빔으로 문서 수정하기
git status
: 깃의 상태를 보여줌
on branch master : 현재 master 브랜치에 있습니다.
No commits yet : 아직 커밋할 파일이 없습니다.
nothing to commit : 현재 커밋할 파일이 없습니다.

깃에서는 아직 한번도 버전 관리하지 않은 파일을 untracked files라고 부름

수정한 파일을 스테이징하기 
git add
: 작업 트리에서 파일을 만들거나 수정했다면 스테이지에 수정한 파일을 추가함
이렇게 깃에게 버전 만들 준비를 하라고 알려주는 것을 스테이징 또는 스테이지에
올린다라고 표현함
스테이징 내용을 .git/index 파일에 저장하기 때문에 스테이지에 올리는 것을
인덱스에 등록한다라고도 함

스테이지에 올라온 파일 커밋하기
git commit -m "message"
: 파일이 스테이지에 있다면 이제 버전을 만들 수 있음
깃에서 버전을 만드는 것을 커밋한다라고 함
메세지와 함꼐 작성해야함

nothing to commit, working tree clean
: 버전으로 만들 파일이 없고, 작업 트리도 수정사항 없이 깨끗하다

커밋 기록 자세히 살펴보기
git log
: 커밋했던 기록을 살펴볼 수 있음

변경 사항 확인하기
git diff
: 작업 트리에 있는 파일과 스테이지에 있는 파일을 비교하거나,
스테이지에 있는 파일과 저장소에 있는 최신 커밋을 비교해서 수정한 파일을
커밋하기 전에 최종적으로 검토할 수 있음

tracked 파일과 untracked 파일
Changed not staged for commit
: 변경될 파일이 아직 스테이지에 올라가지 않았다는 의미
한 번이라도 커밋을 한 파일은 수정 여부를 계속 추적함
새로 올리는 것은 추적되지 않음

git log --stat
: 커밋에 관련된 파일까지 함께 볼 수 있음

커밋을 하고 수정을 하지 않는다면 working tree clean으로 모든 파일이
unmodified 즉, 수정되지 않은 상태로 나옴 만약 여기서 수정을 하게 되면
modified로 나오게 되고 Changed not stage for commit이라는 메시지가 //이게 아니라 스테이지에 올리라는 의미인듯
나오게 되는데 이는 수정을 했으면 커밋으로 적용하라는 의미임(엄밀히 말하면
파일이 수정되었고 아직 스테이지에 올라가지 않았다고 이야기 해주는 거임)
Changed to be committed //이게 나와야 커밋 직전 단계를 의미함

git commit --amend
: 방금 커밋한 메시지 수정하기

작업 되돌리기
작업 트리에서 수정한 파일 되돌리기
git checkout
: checkout으로 되돌린 내용은 다시 복구할 수 없음

스테이징 되돌리기 
git reset HEAD 파일 이름
: 파일 이름을 지정하지 않으면 스테이지에 있는 모든 파일을 되돌리게 됨
Unstaged changes after reset : 스테이지에서 내려졌다는 메시지가 나타남

최신 커밋으로 되돌리기
git reset HEAD^
: HEAD^는 최신 커밋을 의미함
커밋을 취소하면 이 커밋 전에 했던 스테이징도 함께 취소됨

git reset 명령의 옵션 살펴보기
--soft HEAD^
: 최근 커밋을 하기 전 상태로 작업 트리를 되돌립니다.
--mixed HEAD^
: 최근 커밋과 스테이징을 하기 전 상태로 상태로 트리를 되돌립니다.
옵션 없이 git reset 명령을 사용할 경우 이 옵션을 기본으로 작동합니다.
--hard HEAD^
: 최근 커밋과 스테이징, 파일 수정을 하기 전 상태로 작업 트리를 되돌립니다.
이 옵션으로 되돌린 내용은 복구할 수 없습니다.

특정 커밋으로 되돌리기
git reset 커밋 해시
: 특정 버전으로 되돌리게 되면 그 이후 버전들이 삭제됨
reset에서 커밋 해시를 사용해 되돌릴 때 주의할 점이 존재함
예를 들어 reset A를 입력한다면 이 명령은 A 커밋을 리셋하는 것이 아니라
최근 커밋을 A로 리셋하는 거임

커밋 삭제하지 않고 되돌리기
git revert
: 커밋으로 되돌릴 때 수정했던 것을 삭제해도 된다면 git reset 명령을 사용하면 되지만,
나중에 사용할 것을 대비해서 커밋을 되돌리더라도 취소한 커밋을 남겨두어야하는 경우가 있음
이때는 git reset이 아니라 git revert를 사용함
주의할점은 R2 다음 내용을 없애고 싶으면 R2가 아니라 R3를 이용하여 해시값을 가져와야함

